#!/bin/bash -e
#
# Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Path to this script
if [ -h "${0}" ] ; then
    readonly SCRIPT_PATH="$(readlink "${0}")"
else
    readonly SCRIPT_PATH="${0}"
fi
readonly SCRIPT_DIR=$(dirname ${SCRIPT_PATH})
readonly SCRIPT=$(basename ${SCRIPT_PATH})
source ${SCRIPT_DIR}/_common.sh

usage(){
  cat <<EOF

DESCRIPTION: Pull an image from a remote registry

USAGE:

$(basename ${SCRIPT}) [OPTIONS] --name=NAME --registry-url=URL

  --registry-url=URL
          Registry URL. (e.g. https://registry.docker.io/v2)

  --name=NAME
          Name of the image to be pulled.

OPTIONS:

  --ouput-dir=DIR
          Path of the output directory.

EOF
  common_user_password_usage
  common_usage
}

# parse command line args
ARGS=( "${@}" )
for ((i=0;i<${#ARGS[@]};i++))
{
    ARG=${ARGS[${i}]}
    case ${ARG} in
    "--registry-url="*)
        readonly REGISTRY_URL=${ARG#*=}
        ;;
    "--name="*)
        readonly IMAGE_FULL_NAME=${ARG#*=}
        ;;
    "--output-dir="*)
        readonly OUTPUT_DIR=${ARG#*=}
        ;;
    *)
        common_process_user_password_args ${ARG} || common_process_args ${ARG}
        ;;
  esac
}

if [ -z "${IMAGE_FULL_NAME}" ] ; then
    echo "ERROR: --name option is required"
    exit 1
elif [ -z "${REGISTRY_URL}" ] ; then
    echo "ERROR: --registry-url option is required"
    exit 1
elif [ -z "${OUTPUT_DIR}" ] ; then
    readonly OUTPUT_DIR=$(mktemp -d -t "XXX${SCRIPT}")
elif [ ! -d "${OUTPUT_DIR}" ] ; then
    echo "ERROR: ${OUTPUT_DIR} is not a valid directory"
    exit 1
fi

common_init

readonly IMAGE_NAME=${IMAGE_FULL_NAME%%:*}
readonly IMAGE_TAG=${IMAGE_FULL_NAME##*:}
readonly API_URL_BASE="${REGISTRY_URL}/${IMAGE_NAME}"

echo "INFO: pulling image ${IMAGE_NAME}:${IMAGE_TAG} ..."
echo "INFO: outputdir=${OUTPUT_DIR}"

echo "INFO: authenticating..."
if ${DEBUG} ; then
    AUTH_EXTRA_OPTS="--v"
elif ${DEBUG2} ; then
    AUTH_EXTRA_OPTS="--vv"
fi
if [ ! -z "${STDERR}" ] ; then
    AUTH_EXTRA_OPTS="${AUTH_EXTRA_OPTS} --stderr-file=${STDERR}"
fi
if [ ! -z "${UNAME}" ] && [ ! -z "${UPASSWD}" ] ; then
    AUTH_EXTRA_OPTS="${AUTH_EXTRA_OPTS} --user=${UNAME} --password=${UPASSWD}"
fi
readonly TOKEN_FILE=$(mktemp -t XXX-token})
${SCRIPT_DIR}/auth ${AUTH_EXTRA_OPTS} \
    --registry-url=${REGISTRY_URL} \
    --repository=${IMAGE_NAME} \
    --scopes="pull" \
    --output-file=${TOKEN_FILE}

readonly TOKEN=$(cat ${TOKEN_FILE})
readonly AUTH_HEADER="Authorization: Bearer ${TOKEN}"

readonly IMAGE_MANIFEST="${OUTPUT_DIR}/manifest.json"
RESPONSE_HEADERS=$(mktemp -t XXX})

# download manifest
curl -v -X GET \
    -o ${IMAGE_MANIFEST} \
    -D ${RESPONSE_HEADERS} \
    -H "${AUTH_HEADER}" \
    -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
    "${API_URL_BASE}/manifests/${IMAGE_TAG}"
is_http_status_or_die ${RESPONSE_HEADERS} 200

# download image config
readonly IMAGE_CONFIG="$(cat ${IMAGE_MANIFEST} | jq -r '.config.digest' | cut -d ':' -f2).json"
curl -v -L -X GET \
    -o ${OUTPUT_DIR}/${IMAGE_CONFIG} \
    -D ${RESPONSE_HEADERS} \
    -H "${AUTH_HEADER}" \
    -H "Accept: $(cat ${IMAGE_MANIFEST} | jq -r '.config.mediaType')" \
    "${API_URL_BASE}/blobs/$(cat ${IMAGE_MANIFEST} | jq -r '.config.digest')"
is_http_status_or_die ${RESPONSE_HEADERS} 200

get_layer() {
    local digest=${1}
    local media_type=${2}
    local layer_dir=${digest##*:}
    mkdir ${OUTPUT_DIR}/${layer_dir}
    curl -v -L -X GET \
        -o ${OUTPUT_DIR}/${layer_dir}/layer.tar \
        -D ${RESPONSE_HEADERS} \
        -H "${AUTH_HEADER}" \
        -H "Accept: ${media_type}" \
        "${API_URL_BASE}/blobs/${digest}"
    is_http_status_or_die ${RESPONSE_HEADERS} 200
    if [[ `file -b --mime ${OUTPUT_DIR}/${layer_dir}/layer.tar` =~ ^application/x-gzip ]] ; then
        mv ${OUTPUT_DIR}/${layer_dir}/layer.tar ${OUTPUT_DIR}/${layer_dir}/layer.tar.gz
        gunzip ${OUTPUT_DIR}/${layer_dir}/layer.tar.gz
    fi
}

# download layers
echo "INFO: downloading layers..."
for i in `cat ${IMAGE_MANIFEST} | jq '.layers | to_entries | .[].key'`
do
    get_layer $(cat ${IMAGE_MANIFEST} | jq -r ".layers[${i}].digest") \
              $(cat ${IMAGE_MANIFEST} | jq -r ".layers[${i}].mediaType")
done

echo "INFO: image pull completed"